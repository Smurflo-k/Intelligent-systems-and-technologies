# -*- coding: utf-8 -*-
"""ИИ_лабы_1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g9Mkb0BjK_9wv1IAaXp6Mmruie0XdDbR
"""

import pandas as pd

df = pd.read_excel("data.xlsx")
df

df.columns.tolist()

bad_columns = [
    'Как часто вы берете инициативу в свои руки? / Баллы',
    'Как часто вы пропускаете завтраки? / Баллы',
    'Какая культура ближе / Баллы',
    'Выпиваете алкоголь / Баллы',
    'Формат работы / Баллы',
    'Любимое время года? / Баллы',
    'Что пьют родители / Баллы',
    'Какие напитки любите / Баллы',
    'Набрано баллов',
    'Всего баллов',
    'Результат теста',
]
df = df.drop(columns=bad_columns)

df.to_csv("data.csv", mode="w+", index=False)

data = pd.read_csv('data.csv')
data.head()

numeric_cols = ['Возраст', 'Сколько спите ночью в среднем', 'Время подъема']
categorical_cols = [col for col in df.columns if col not in numeric_cols]
data_encoded = pd.get_dummies(df, columns=categorical_cols, drop_first=True)
print(data_encoded.columns)

for col in numeric_cols:
    data_encoded[col] = (data_encoded[col] - data_encoded[col].min()) / (
            data_encoded[col].max() - data_encoded[col].min())
# data_encoded = pd.get_dummies(data, drop_first=True)
print("Total number of rows in dataset = {}".format(data_encoded.shape[0]))
print("Total number of columns in dataset = {}".format(data_encoded.shape[1]))
data_encoded.head()

data_encoded.info()

X = data_encoded.drop('Что вы предпочитаете?_Чай', axis=1).values
Y = data_encoded['Что вы предпочитаете?_Чай'].values  # чай = True, кофе = False

X

Y

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.20)

import math
from collections import Counter


def euclidean_distance(point1, point2):
    distance = 0.0
    for i in range(len(point1)):
        distance += (point1[i] - point2[i]) ** 2
    return math.sqrt(distance)


def knn_predict_weighted(X_train, y_train, X_test, k):
    predictions = []
    for test_point in X_test:
        distances = []
        for i in range(len(X_train)):
            distance = euclidean_distance(X_train[i], test_point)
            distances.append((distance, y_train[i]))
        distances.sort(key=lambda x: x[0])


        weights = Counter()
        for distance, label in distances[:k]:
            weight = 1 / (distance + 1e-5)
            weights[label] += weight

        predictions.append(weights.most_common(1)[0][0])

    return predictions



def accuracy(y_true, y_pred):
    correct = sum(1 for true, pred in zip(y_true, y_pred) if true == pred)
    return correct / len(y_true)


best_k = 1
best_accuracy = 0
n = 40
for k in range(1, n + 1):
    predictions = knn_predict(X_train, y_train, X_test, k)
    acc = accuracy(y_test, predictions)
    print(f"Точность для k={k}: {acc:.2f}")

    if acc > best_accuracy:
        best_accuracy = acc
        best_k = k

print(f"Лучшее значение k: {best_k} с точностью {best_accuracy:.2f}")